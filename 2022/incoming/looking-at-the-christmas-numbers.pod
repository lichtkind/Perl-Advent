Author: lichtkind@cpan.org
Title: Looking at the Christmas Numbers
Topic: charts, colors

=encoding utf8

=head1 Looking at the Christmas Numbers

Yes we want to put a heavinly smile on faces of people we treasure.
But the expenses need to be kept in check - so lets create some bar charts.

=head2 Grabbing some code

The fastest start we get by copying some example from L<Chart::Manual::Types>, 
where all details are explained. Then we change the first dataset 
(animal names => gift recipients), and paste into the following sets our numbers.
At last we label axis and legend and a first draft is ready:

=begin perl

    use Chart::Bars;
    my $g = Chart::Bars->new( 600, 600 );
    $g->add_dataset( qw/ Peter Paul Mary/ );
    $g->add_dataset( 30, 40, 80 );
    $g->add_dataset( 80, 60, 30 );
    $g->add_dataset( 50, 30, 60 );
    $g->set(
        title         => 'Christmas Expenses',
        x_label       => 'Recipient',
        y_label       => 'Amount',
        legend_labels => ['2020', '2021', '2022'],    
        y_grid_lines  => 'true',
        min_val       =>  0,
        precision     =>  0,
        colors => {
            y_grid_lines => 'gray70',
            misc         => 'gray55',
            text         => 'gray55',
            x_label      => 'gray40',
            y_label      => 'gray40',
            title        => 'gray20',
        },
    );
    $g->png("bars1.png");

=end perl

=begin html

<img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars1.png"    alt="first bar chart"  width="300" height="300">

=end html


=head2 Finding Colors

The only issue now are the dataset colors, which are optimized for contrast (they scream).
Intuitive would be to have shades of the same color to signify that neighbouring
bars are about the same person, only some numbers are older than others.
To achieve that pick some appealing color from the table in the lower half of 
L< Graphics::Toolkit::Color::Constant>. I like C<'royalblue3'> of the I<CSS>
standard. It also has the advantage of providing a workable gradient (list of
shades) for free. So just add:

=begin perl

        colors => { ..
            dataset0     => 'royalblue3',
            dataset1     => 'royalblue2',
            dataset2     => 'royalblue1',
        },

=end perl

The only counterintuitive part of this code is to understand that the first
C<add_dataset> only adds axis labels and the following C<add_dataset> is 
C<dataset0>.

=begin html

<img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars2.png"    alt="first bar chart"  width="300" height="300">

=end html

=head2 Customize Colors

Now the artist in me says: not bad, but the middle blue should be a little darker.
Allright, let's load the whole toolkit (a direct dependency of C<Chart>) and import
also the helper function C<color>, to keep it all short and sweet. Please make sure
to have the latest version installed to use that feature.

=begin perl

    use Graphics::Toolkit::Color 'color';
     ..

        colors => { ..
            dataset1     => color('royalblue3')->add( { Lightness => -4 } ),

=end perl

=begin html

<img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars3.png"    alt="first bar chart"  width="300" height="300">

=end html

=head2 Open the Color Factory

I'm good now, but what would a super picky designer, who just came from the 
I<New York Fashion Week> say? Maybe something like: how lame - I want a gradient from
I<Glacier Lake> to I<Harbor Blue>. Alright - let's check quickly if 
L<Graphics::ColorNames::PantoneReport> is installed by C<grep> 'ing the
result of C<Graphics::ColorNames::all_schemes> and if so, create our own
three color gradient with the colors from this summers I<Pantone Report>.
(Other standards like I<X>, I<HTML> or I<VACCC> are available too
 - just look at L<Bundle::Graphics::ColorNames>).

=begin perl

    my @gradient = color('PantoneReport:Glacier_Lake')
                         ->gradient_to('PantoneReport:Harbor_Blue', 3);
     ..
        colors => { ..
            dataset0     => $gradient[0],
            dataset1     => $gradient[1],
            dataset2     => $gradient[2],

=end perl

=begin html

<img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars4.png"    alt="first bar chart"  width="300" height="300">

=end html

It goes without saying that with more datasets this will be the method of choice -
just adapt the second argument of C<gradient_to>. And if you want color that are
very different but harmonious, use the method C<complementary> instead.

=begin perl

    my @gradient = color('royalblue3')->blend_with('royalblue4')->complementary( 3 );

=end perl

=begin html

<img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars5.png"    alt="first bar chart"  width="300" height="300">

=end html

=head2 Conclusion

With L<Graphics::Toolkit::Color> you can quickly color you chart after your liking.
Check all example code and images L<here|https://github.com/lichtkind/Chart/tree/main/dev/example/advent>.

=cut



